{"version":3,"sources":["addcircle.png","ClassifyUrl.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ClassifyUrl","props","_this","Object","classCallCheck","this","console","log","possibleConstructorReturn","getPrototypeOf","call","state","overlayActive","overlaySpinnerActive","overlayText","getApiUrl","classifyImg","enableClassify","handleClick","bind","assertThisInitialized","handleClassify","toggleOverlay","doPostCallback","doGetCallback","data","animal","computer","mickey","predictions","_this2","setState","_this3","toggleSpinner","uploaded","_this4","fetch","method","body","imgBlob","then","res","json","obj","exampleMapping","catch","error","message","_this5","params","encodeURIComponent","axios","get","response","react_default","a","createElement","LoadingOverlay_default","active","spinner","text","onClick","className","src","alt","Link","to","Component","Home","imgId","onChange","file","document","getElementById","files","reader","FileReader","that","onloadend","bubble","result","history","push","readAsDataURL","id","type","accept","click","app_name","VerifyUrl","x","addcircle","imgSrc","displayImg","enableNext","handlePaste","e","v","clipboardData","getData","pastedUrl","value","imgSrcRaw","handleChange","placeholder","onPaste","App","verifyImgUrl","verifyImg","validImg","handleError","name","val","event","target","BrowserRouter","basename","process","Route","path","exact","render","src_Home","assign","App_VerifyUrl","imgSrcClean","src_ClassifyUrl","handleSubmit","Boolean","window","location","hostname","match","ReactDOM","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f17116c9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/addcircle.259374c6.png\";","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\n\nimport axios from 'axios';\nimport LoadingOverlay from 'react-loading-overlay';\n\nclass ClassifyUrl extends Component {\n  constructor(props){\n    console.log(\"ccc props\", props);\n    super(props);\n    this.state = { \n      overlayActive: false,\n      overlaySpinnerActive: false,\n      overlayText:\"Waiting for model on remote server to answer...\",\n      getApiUrl: props.getApiUrl || 'https://dsm.just-minimalism.com/classify-url',\n      classifyImg: props.classifyImg,\n      enableClassify: true,\n    }\n    this.handleClick = this.handleClick.bind(this);\n    this.handleClassify = this.handleClassify.bind(this);\n    this.toggleOverlay = this.toggleOverlay.bind(this);\n    this.doPostCallback = this.doPostCallback.bind(this);\n    this.doGetCallback = this.doGetCallback.bind(this);\n  }\n\n  exampleMapping(data){\n    const dict = {\n      animal: \"This is an animal mouse!\",\n      computer: \"This is a computer mouse!\",\n      mickey: \"This is mickey mouse\",\n    }\n    return dict[data.predictions[0][0]];\n  }\n\n  handleClick(){\n    this.toggleOverlay();\n  }\n\n  toggleOverlay(){\n    this.setState(state => ({\n        overlayActive: !this.state.overlayActive\n      })\n    );\n  }\n\n  toggleSpinner(){\n    this.setState(state => ({\n        overlaySpinnerActive: !this.state.overlaySpinnerActive\n      })\n    );\n  }\n\n  handleClassify(){\n    this.toggleOverlay();\n    this.toggleSpinner();\n    this.setState({ overlayText: 'Classifying image'});\n\n    if(this.props.uploaded){\n      this.doPostCallback();\n    } else {\n      this.doGetCallback();\n    }\n\t}\n\n \tdoPostCallback(){\n    //const base = 'https://dsm.just-minimalism.com/classify-url';\n    const base = 'http://138.197.227.42/classify-url';\n\t\t\tfetch(base, {\n\t\t\t  method: \"POST\",\n\t\t\t  body: this.props.imgBlob\n\t\t\t}).then(res => {\n        console.log(\"inside the yes\", res);\n\t\t\t\treturn res.json().then(obj=> {\n          console.log(\"inside the object parse\", obj);\n          this.setState({ \n            overlayText: this.exampleMapping(obj),\n            enableClassify: false,\n            overlayActive: true\n          });\n          this.toggleSpinner();\n\t\t\t\t})\n      }).catch(error => {\n        console.log(\"THEE CATCH\", error);\n          this.setState({ \n            overlayText: error.message,\n            enableClassify: true\n          });\n          this.toggleSpinner();\n      });\n\t\t}\n  \n\n  doGetCallback(){\n    const base = 'https://dsm.just-minimalism.com/classify-url';\n    //const base = 'http://138.197.227.42/classify-url';\n    const params = '?url=' + encodeURIComponent(this.state.classifyImg);\n    axios.get(base + params)\n      .then((response) => {\n          console.log('ABOUT TO SET STATE', response);\n          this.setState({ \n            overlayText: this.exampleMapping(response.data),\n            enableClassify: false\n          });\n          this.toggleSpinner();\n        }\n      )\n  }\n\n  render() {\n    return (\n      <LoadingOverlay\n        active={this.state.overlayActive}\n        spinner={this.state.overlaySpinnerActive}\n        text={this.state.overlayText}\n        onClick={this.handleClick}\n      >\n        <div className=\"App-header\">\n          <div className=\"App-page\">\n            <div className=\"App-panel\">\n              <img src={this.props.classifyImg} className=\"App-preview-img\" alt=\"\"/>\n              <Link className=\"App-link-button\" to=\"/classify\" onClick={this.handleClassify} >\n                  Classify\n              </Link>\n            </div>\n          </div>\n        </div>\n        <Link to=\"/\" className=\"App-back-link\">Back</Link>\n      </LoadingOverlay>\n    )\n  }\n}\n\nexport default ClassifyUrl\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\n\nimport LoadingOverlay from 'react-loading-overlay';\n\nclass Home extends Component {\n\n    constructor(props){\n      super(props);\n\n      this.state = {\n        overlayActive: false,\n        overlaySpinnerActive: false,\n        overlayText:\"\",\n      }\n\n      this.imgId = 'ah3bd9-inputfile';\n      this.onChange = this.onChange.bind(this);\n    }\n\n  onChange(){\n    this.setState({\n        overlayActive: true,\n        overlaySpinnerActive: true,\n        overlayText:\"Accessing Image...\",\n    })\n\n    const file   = document.getElementById(this.imgId).files[0];\n    const reader = new FileReader();\n\n    const that = this;\n    reader.onloadend = function(){\n      that.props.bubble('verifyImg', reader.result);\n      that.props.bubble('uploaded', true);\n      that.props.bubble('imgBlob', file);\n      that.props.history.push('/classify');\n      that.setState({\n          overlayActive: false,\n      })\n\n    }\n\n    if (file){\n      reader.readAsDataURL(file);\n      this.setState({\n          overlayActive: true,\n          overlaySpinnerActive: true,\n          overlayText:\"Accessing Image...\",\n      })\n    }\n\n  }\n\n\n\n  render(){\n    return (\n      <LoadingOverlay\n        active={this.state.overlayActive}\n        spinner={this.state.overlaySpinnerActive}\n        text={this.state.overlayText}\n        onClick={this.handleClick}\n      >\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <div className=\"App-panel\">\n              <Link\n                className=\"App-link\"\n                to=\"/verify-url\"\n              >\n                Enter Url\n              </Link>\n            </div>\n              <p>\n                Or\n              </p>\n            <div className=\"App-panel\">\n              <div id=\"input-hider\">\n                <input type=\"file\" onChange={this.onChange} id={this.imgId} accept=\"image/*\"/>\n              </div>\n              <div className=\"App-link\" onClick={()=>document.getElementById(this.imgId).click()}>Upload file / Take photo {this.state.overlayText}</div>\n            </div>\n          </header>\n        </div>\n      </LoadingOverlay>\n    );\n  }\n\n}\n\nexport default Home\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport './App.css';\n\n\nimport addcircle from './addcircle.png';\n\n\nimport { name as app_name } from '../package.json';\n\nimport ClassifyUrl from './ClassifyUrl'\nimport Home from './Home'\n\n\nconsole.log(\"Name is \", app_name);\n\n\nclass VerifyUrl extends Component {\n  constructor(props){\n    super(props);\n    console.log(\"we are in the component\");\n    this.state = { \n      x : addcircle,\n      imgSrc : '',\n      displayImg: false,\n      enableNext: false\n    }\n\n      this.handlePaste = this.handlePaste.bind(this);\n  }\n\n  handlePaste(e,v){\n    console.log(\"OP\", e.clipboardData);\n    console.log(\"--2\", e.clipboardData.getData('Text'));\n    const pastedUrl = e.clipboardData.getData('Text');\n    this.props.bubble('verifyImg', pastedUrl);\n    this.props.history.push('/classify');\n  }\n\n  //<img src={this.props.imgSrcClean} className=\"App-preview-img\"  onError={this.props.handleError} onLoad={()=> this.setState({enableNext:true})} alt=\"\"/> \n  render() {\n    return (\n      <div className=\"App-header\">\n        <div className=\"App-page\">\n          <input type=\"text\" value={this.props.imgSrcRaw} className=\"App-text-input\" onChange={this.props.handleChange} placeholder=\"Paste a URL\" onPaste={this.handlePaste}/>\n        </div>\n      </div>\n    )\n  }\n}\n\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = { \n      classifyImg: '',\n      verifyImgUrl: null,\n      verifyImg: addcircle,\n      validImg: false,\n      uploaded: false,\n      imgBlob: null,\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleError = this.handleError.bind(this);\n    this.bubble = this.bubble.bind(this);\n  }\n\n  bubble(name, val) {\n    console.log(\"calling set state in bubble with\", name, val);\n    this.setState(state => (state[name]=val));\n  }\n\n\n  handleError(event) {\n    this.setState(state => ({\n      verifyImg: addcircle\n    }))\n  }\n\n  handleChange(event) {\n    const val = event.target.value;\n    this.setState(state => ({\n      verifyImgUrl: val,\n      verifyImg: val,\n    }))\n  }\n  render(props) {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <div className=\"app-container\">\n          <Route path=\"/\" exact render={ (props) => \n            <Home {...props} bubble={this.bubble}></Home> \n          } />\n          <Route path=\"/verify-url\" exact render={(props) => \n              <VerifyUrl \n                {...props}\n                classifyImg={this.state.classifyImg}\n                handleChange={this.handleChange} \n                handleError={this.handleError} \n                imgSrcRaw={this.state.verifyImgUrl}\n                imgSrcClean={this.state.verifyImg}\n                bubble={this.bubble}\n              />\n          }/>\n          <Route path=\"/classify\" exact render={(props) => \n              <ClassifyUrl \n                {...props}\n                classifyImg={this.state.verifyImg}\n                handleSubmit={this.handleSubmit} \n                uploaded={this.state.uploaded}\n                imgBlob={this.state.imgBlob}\n              />\n          }/>\n          <div id=\"app-info\">\n            <p>0d72715ef9bfbfe1bc8c11a2156c792685311c57</p>\n            <p>    improve async messaging</p>\n          </div>\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}