{"version":3,"sources":["addcircle.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","console","log","app_name","ClassifyUrl","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","overlayActive","overlaySpinnerActive","overlayText","getApiUrl","classifyImg","enableClassify","handleClick","bind","assertThisInitialized","handleClassify","toggleOverlay","data","animal","computer","micky","predictions","_this2","setState","_this3","_this4","params","encodeURIComponent","toggleSpinner","axios","get","then","response","exampleMapping","react_default","a","createElement","LoadingOverlay_default","active","spinner","text","onClick","className","src","alt","Link","to","disabled","Component","VerifyUrl","_this5","x","addcircle","imgSrc","imgSrcClean","onError","handleError","type","value","imgSrcRaw","onChange","handleChange","Home","App","_this6","verifyImgUrl","verifyImg","validImg","event","target","val","_this7","BrowserRouter","basename","process","Route","path","exact","component","render","App_VerifyUrl","App_ClassifyUrl","handleSubmit","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6c0566e9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/addcircle.259374c6.png\";","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport './App.css';\n\nimport axios from 'axios';\n\nimport addcircle from './addcircle.png';\n\n\nimport { name as app_name } from '../package.json';\n\n\nimport LoadingOverlay from 'react-loading-overlay';\nconsole.log(\"Name is \", app_name);\n\n\nclass ClassifyUrl extends Component {\n  constructor(props){\n    super(props);\n    this.state = { \n      overlayActive: false,\n      overlaySpinnerActive: false,\n      overlayText:\"Loading..\",\n      getApiUrl: props.getApiUrl || 'https://dsm.just-minimalism.com/classify-url',\n      classifyImg: props.classifyImg,\n      enableClassify: true,\n    }\n    this.handleClick = this.handleClick.bind(this);\n    this.handleClassify = this.handleClassify.bind(this);\n    this.toggleOverlay = this.toggleOverlay.bind(this);\n  }\n\n  exampleMapping(data){\n    console.log(\"inside exampleMapping-->\", data,data);\n    console.log(\"<--inside exampleMapping\");\n    const dict = {\n      animal: \"This is an animal mouse!\",\n      computer: \"This is a computer mouse!\",\n      micky: \"This is micky mouse (and disney just made a dollar).\",\n    }\n    return dict[data.predictions[0][0]];\n  }\n\n  handleClick(){\n    this.toggleOverlay();\n  }\n\n  toggleOverlay(){\n    this.setState(state => ({\n        overlayActive: !this.state.overlayActive\n      })\n    );\n  }\n\n  toggleSpinner(){\n    this.setState(state => ({\n        overlaySpinnerActive: !this.state.overlaySpinnerActive\n      })\n    );\n  }\n\n  \n\n  handleClassify(){\n    const base = 'https://dsm.just-minimalism.com/classify-url';\n    const params = '?url=' + encodeURIComponent(this.state.classifyImg);\n    this.toggleOverlay();\n    this.toggleSpinner();\n    this.setState({ overlayText: 'Loading..'});\n    console.log(\"in handle classify\");\n    axios.get(base + params)\n      .then((response) => {\n          console.log(response);\n          this.setState({ \n            overlayText: this.exampleMapping(response.data),\n            enableClassify: false\n          });\n          this.toggleSpinner();\n        }\n      )\n  }\n\n  render() {\n    return (\n      <LoadingOverlay\n        active={this.state.overlayActive}\n        spinner={this.state.overlaySpinnerActive}\n        text={this.state.overlayText}\n        onClick={this.handleClick}\n      >\n        <div className=\"App-header\">\n          <img src={this.props.classifyImg} className=\"App-logo\" alt=\"\"/>\n          <Link className=\"App-button-link\" to=\"/classify\" >\n            <button className=\"App-button\" onClick={this.handleClassify} disabled={!this.state.enableClassify}>\n              Classify..\n            </button>\n          </Link>\n          <Link to=\"/\" className=\"App-back-link\">Back</Link>\n        </div>\n      </LoadingOverlay>\n    )\n  }\n}\n\nclass VerifyUrl extends Component {\n  constructor(props){\n    super(props);\n    console.log(\"we are in the component\");\n    this.state = { \n      x : addcircle,\n      imgSrc : '',\n    }\n\n  }\n\n  render() {\n    console.log(\"IN VERIFY RENDER WITH\", this.props);\n    return (\n      <div className=\"App-header\">\n        <img src={this.props.imgSrcClean} className=\"App-logo\"  onError={this.props.handleError} alt=\"\"/>\n        <input type=\"text\" value={this.props.imgSrcRaw} className=\"App-text-input\" onChange={this.props.handleChange}/>\n        <Link className=\"App-button-link\" to=\"/classify\" >\n          <button className=\"App-button\">\n            Next\n          </button>\n        </Link>\n      </div>\n    )\n  }\n}\n\nfunction Home(props) {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Link\n            className=\"App-link\"\n            to=\"/verify-url\"\n          >\n            Enter Url\n          </Link>\n          <p>\n            Or\n          </p>\n          <Link\n            className=\"App-link\"\n            to=\"https://reactjs.org\"\n          >\n            Take Photo / Upload Photo\n          </Link>\n        </header>\n      </div>\n    );\n}\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = { \n      classifyImg: '',\n      verifyImgUrl: null,\n      verifyImg: addcircle,\n      validImg: false,\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleError = this.handleError.bind(this);\n  }\n\n\n  handleError(event) {\n    console.log(\"IN ERROR WITH EVENT\", event.target);\n    this.setState(state => ({\n      verifyImg: addcircle\n    }))\n  }\n\n  handleChange(event) {\n    const val = event.target.value;\n    this.setState(state => ({\n      verifyImgUrl: val,\n      verifyImg: val,\n    }))\n  }\n  render() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <div className=\"app-container\">\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/verify-url\" exact render={(props) => \n              <VerifyUrl \n                classifyImg={this.state.classifyImg}\n                handleChange={this.handleChange} \n                handleError={this.handleError} \n                imgSrcRaw={this.state.verifyImgUrl}\n                imgSrcClean={this.state.verifyImg}\n              />\n          }/>\n          <Route path=\"/classify\" exact render={(props) => \n              <ClassifyUrl \n                classifyImg={this.state.verifyImg}\n                handleSubmit={this.handleSubmit} \n              />\n          }/>\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}